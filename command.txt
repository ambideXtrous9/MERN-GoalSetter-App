npm i express mongoose dotenv
npm i -D nodemon


-------------------------------------------------

edit this in package.json

"scripts": 
{
    "start": "node backend/server.js",
    "server": "nodemon backend/server.js"
}

npm run server [^c to stop]

----------------------------------------------------

git init
git add .
git commit -m 'Initial Commit'


---------------------------------------------------

router.put('/:id', (req,res) => {
    res.status(200).json({
        message : `Update Goals ${req.params.id}`
    })
})

module.exports = router  // to be imported in main file

// after backend

-------------------------Frontend--------------------------------------

npx create-react-app@latest frontend --template redux

-> 'frontend' folder will be used (inside) 
-> install redux toolkit
-> add react redux package

1. "scripts": {"client" : "npm start --prefix frontend"} add this in backend 'package.json'
2. npm run client -> run the front end in local-server

3. then delete App.css and logo.svg from 'frontend/src/'

4. edit App.js and keep only
        function App() {
        return (
            <div>
            <h1>My App</h1>
            
            </div>
        );
        }

        export default App;


5. in index.js

// whenever we create redux resource or state resource like(users or goals)
// in the app folder 'store.js' we just need to add our reducer what is called
// a slice and add it to our store.

6. then go to app/store.js

    import { configureStore } from '@reduxjs/toolkit';


    // will add user reducer and goal reducer
    export const store = configureStore({
    reducer: {
        
    },
    });

7. delete everything inside 'features' folder

8. now in index.css delete everything and copy from its github and paste it

9. 3 pages we need

// we'll going to have 3 pages - 1.dashboard 2.login 3.register
// for that we create a folder inside src - 'src/pages' and and create
// 3 .jsx files  
// add vs code extension ES7+ React/Redux
// type rfce -> it will add the function snippet reactFunctionalExportComponent
// do the same for Login and Register

10. now open new terminal and do 'cd frontend' and 
    install 'npm i react-router-dom' inside frontend folder

11. Now go to App.js file and import

    import {BrowserRouter as Router, Routes, Route} from 'react-router-dom'

    <Routes>
        <Route path='/' element={<Dashboard/>} />
        <Route path='/register' element={<Register/>} />
        <Route path='/login' element={<Login/>} />
    </Routes>

12. Now create component folder and create Header.jsx and call rfce

13. now inside frontend install 'npm i react-icons'

14. the in Header.jsx
    import {FaSignInAlt, FaSignOutAlt, FaUser} from 'react-icons/fa'
    import {Link} from 'react-router-dom'

15. in App.js
    <Router>
      <div className='container'>
        <Header/>
        <Routes>
          <Route path='/' element={<Dashboard/>} />
          <Route path='/register' element={<Register/>} />
          <Route path='/login' element={<Login/>} />
        </Routes>
      </div>
    </Router>

16. frontend for Reg and Login are done.

17. Now we want backend and frontend should run concurrently. So,
    a. 'npm i -D concurrently' in root ~/MERN$
    b. go to package.json and add after "client"
        "dev" : "concurrently \"npm run server\" \"npm run client\""
    c. npm run dev

18. Now we will add redux and start in - /frontend/src/features
    a. create a folder -> auth - that will contain auth part of our global state
    b. create authSlice.js -> will contain reducers and initial states related to auth
    
19. When user == null , we should not have access to Dashboard, So, go to 
    frontend/package/Dashboard.jsx and modify

--------------------------------------------------------------------------------------------

Now we try to implement Goals:

1. We have to add our goals to global state. in features create folder 'goals'
    and create - a. goalSlice.js, b. goalService.js

    import goalReducer from '../features/goals/goalSlice'

    // will add user reducer and goal reducer
    export const store = configureStore({
        reducer: {
            // open redux dev tools in browser, then go to state, 
            // this auth will appear
            auth : authReducer,
            goals : goalReducer 
        },
    });

2. Now go to Dashboard.jsx and modify the page

3. Dashboard will have its own components : 
    so go to components and create GoalForm.jsx and do rfce

4. change the name of the App -> go to frontend/public/index.html 
    and change the name

------------------------------Deployment------------------------------------
Stop Serever from running.

we are using - frontend dev server, that is not for production, go to server.js

npm run build - creates a build folder with all our static assets
index.html is entrypoint of our frontend. add this to server.js

// under the routes of server.js

MERN/frontend/ - run - npm run build

Now change env NODE_ENV = production and run - npm start (if any error try with different PORT)







